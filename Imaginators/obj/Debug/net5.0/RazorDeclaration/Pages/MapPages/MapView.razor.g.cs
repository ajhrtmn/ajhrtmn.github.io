// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Imaginators.Pages.MapPages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.GameObjects;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.SkillsPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.HUDPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.ZonePages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.PopoverPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.UIPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.QuestPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.MapPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.PackPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.CombatPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/_Imports.razor"
using Imaginators.Pages.ItemsPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/Pages/MapPages/MapView.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/Pages/MapPages/MapView.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
    public partial class MapView : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 59 "/Volumes/Wall Screen/Imaginators Assets/Code/Imaginators/Pages/MapPages/MapView.razor"
      
    [Parameter] public int Player_Count { get; set; }

    private IList<Zone> explored_zones = new List<Zone>();
    private IList<Actor> char_list = new List<Actor>();
    
    private int Zone_Count = 0;
    private int Wall_Count = 0;

    private int current_player = 0;
    private string current_zone = "";
    private string new_zone = "";
    private bool explored = false;



    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var open_wall = new Wall();
            open_wall.WallType ="Open";

            Player_Count = 1;

            Zone_Count++;

            explored_zones.Add(new Zone {
                Row = 0,
                Column = 0,
                EnteredFrom = "",
                North = open_wall,
                South = open_wall,
                East = open_wall,
                West = open_wall
                });

            for (double i = 0; i < Player_Count; i++)
            {
                char_list.Add(new Actor { Row = 0, Column = 0 });
            }
        }

    }

    private void ExploreTile(Double row, Double col, string ent)
    {
        var open_wall = new Wall();
        open_wall.WallType ="Open";

        var has_teleport = false;

        var n_surround = 0;
        var s_surround = 0;
        var e_surround = 0;
        var w_surround = 0;

        var north_wall = new Wall();
        var south_wall = new Wall();
        var east_wall = new Wall();
        var west_wall = new Wall();

        Zone_Count++;

        foreach ( Zone zone in explored_zones )
        {
            if ( zone.Column == col )
            {
                if ( zone.Row == ( row + 1 ) )
                {
                    south_wall = zone.North;
                    n_surround++;
                }
                if ( zone.Row == ( row - 1 ) )
                {
                    north_wall = zone.South;
                    s_surround++;
                    
                }
            }
            if ( zone.Row == row )
            {
                if ( zone.Column == ( col + 1 ) )
                {
                    east_wall = zone.West;
                    e_surround++;
                }
                if ( zone.Column == ( col - 1 ) )
                {
                    west_wall = zone.East;
                    w_surround++;
                }
            }
        }


    if ( north_wall.WallType != "Open" ) { Wall_Count++; }
    if ( south_wall.WallType != "Open" ) { Wall_Count++; }
    if ( east_wall.WallType != "Open" ) { Wall_Count++; }
    if ( west_wall.WallType != "Open" ) { Wall_Count++; }

    
    if ( Wall_Count >= ( Zone_Count * 2 ) )
    {
        if ( n_surround != 1 ) { north_wall = open_wall; Wall_Count--; }
        if ( s_surround != 1 ) { south_wall = open_wall; Wall_Count--; }
        if ( e_surround != 1 ) { east_wall = open_wall; Wall_Count--; }
        if ( w_surround != 1 ) { west_wall = open_wall; Wall_Count--; }
        Console.WriteLine("Surounds");
        Console.WriteLine(n_surround + s_surround + e_surround + w_surround);
    }
    


        Console.WriteLine("WallCount");
        Console.WriteLine(Wall_Count);
        Console.WriteLine("ZoneCount * 2");
        Console.WriteLine(Zone_Count * 2 );
        

        explored_zones.Add(new Zone
        {
            JustSpawned = true,
            Row = row, Column = col,
            EnteredFrom = ent,
            North = north_wall,
            South = south_wall,
            East = east_wall,
            West = west_wall,
            has_Teleport = has_teleport
        });
    }

    
    private async void MoveChar(MouseEventArgs e, String direction, Double char_row, Double char_col)
    {
        if ( shift_is_down != true )
        {
            double new_row = char_row;
            double new_col = char_col;
            var ent = "";

            explored = false;

            if ( direction == "north" ) { ent = "South"; new_row = char_row - 1; }
            if ( direction == "south" ) { ent = "North"; new_row = char_row + 1; }
            if ( direction == "east" ) { ent = "West"; new_col = char_col + 1; }
            if ( direction == "west" ) { ent = "East"; new_col = char_col - 1; }

            foreach ( Zone zone in explored_zones )
            {
                if ( zone.Row == new_row )
                {
                    if ( zone.Column == new_col ) { explored = true; break; }
                }
            }

            if ( explored == false ) { new_zone = ""; ExploreTile(new_row, new_col, ent); }

            MoveActor(current_player, "char", new_row, new_col);

            var moving = 0;
            var rate = 4;
            while ( moving < 90 )
            {
                if ( moving > 30 && moving < 51 ) { rate = 6; }
                if ( moving > 50 && moving < 66 ) { rate = 8; }
                if ( moving > 65 && moving < 76 ) { rate = 12; }
                if ( moving > 75 ) { rate = 16; }


                await Task.Delay(rate);
                if ( direction == "north" ) { map_y += 5; }
                if ( direction == "south" ) { map_y += -5; }
                if ( direction == "east" ) { map_x += -5; }
                if ( direction == "west" ) { map_x += 5; }
                StateHasChanged();
                moving++;
            }
        }
    }

    private void MoveActor(int current_id, String actor_type, Double new_row, Double new_col)
    {
        if ( actor_type == "char" )
        {
            char_list[current_id].Row = new_row;
            char_list[current_id].Column = new_col;
        }
    }


    private double map_x;
    private double map_y;
    private double xco = 0;
    private double yco = 0;
    private static int zone_size_px = 450;

    private bool mouse_is_down = false;
    private bool shift_is_down = false;

    private double mxs;
    private double mys;
    private double max_xy = -4750;
    private double min_xy = 4750;

    private void StartMapDrag(MouseEventArgs e)
    {
        mxs = e.ClientX;
        mys = e.ClientY;
        mouse_is_down = true;
        if ( e.ShiftKey == true ) { shift_is_down = true; }

    }
    private void MapDrag(MouseEventArgs e)
    {
        if ( shift_is_down == true )
        {
            if (mouse_is_down == true)
            {
                map_x += e.ClientX - mxs;
                mxs = e.ClientX;
                map_y += e.ClientY - mys;
                mys = e.ClientY;
            }
        }
        
    }    
    private void ResetMapDrag(MouseEventArgs e)
    {
        mouse_is_down = false;
        shift_is_down = false;

        if ( map_x < max_xy ) { map_x = max_xy; }
        if ( map_x > min_xy ) { map_x = min_xy; }
        if ( map_y < max_xy ) { map_y = max_xy; }
        if ( map_y > min_xy ) { map_y = min_xy; }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
